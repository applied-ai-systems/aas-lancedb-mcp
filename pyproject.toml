[project]
name = "aas-lancedb-mcp"
version = "0.1.0"
description = "Enhanced LanceDB MCP Server for arbitrary datastore management with sentence transformers"
readme = "README.md"
requires-python = ">=3.10"
dependencies = [
    "lancedb>=0.12.0",
    "pydantic>=2.0",
    "mcp>=1.1.2",
    "numpy>=1.24.0",
    "pandas>=2.0.0",
    "fastapi>=0.100.0",
    "uvicorn>=0.22.0",
    "tomlkit>=0.12.0",
    "sentence-transformers>=3.0.0",
    "torch>=2.0.0",
    "typing-extensions>=4.0.0",
    "httpx>=0.25.0",
]
authors = [
    { name = "AAS Team", email = "team@aas.dev" }
]
maintainers = [
    { name = "RyanLisse", email = "ryan.lisse@gmail.com" }
]

[project.optional-dependencies]
dev = [
    "pytest>=8.0.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "pyright>=1.1.389",
    "ruff>=0.7.3",
    "bandit[toml]>=1.7.5",
    "twine>=4.0.0",
    "build>=0.10.0",
]

[project.scripts]
aas-lancedb-mcp = "lancedb_mcp.__main__:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/lancedb_mcp"]

[tool.ruff]
line-length = 88
target-version = "py311"
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "D",   # pydocstyle
    "UP",  # pyupgrade
    "N",   # pep8-naming
    "B",   # flake8-bugbear
    "S",   # bandit security
    "C90", # mccabe complexity
]
ignore = [
    "D203",  # one-blank-line-before-class
    "D213",  # multi-line-summary-second-line
    "S101",  # Use of assert in tests is OK
    "S603",  # subprocess call without shell=True is OK
    "S110",  # try-except-pass is sometimes necessary
    "B019",  # lru_cache on methods - we need this for model caching
    "C901",  # function too complex - will refactor later
    "N806",  # variable naming - dynamic class creation needs PascalCase
    "E501",  # line too long - some long strings are unavoidable
]

[tool.ruff.per-file-ignores]
"tests/*" = ["D", "S"]  # Ignore docstring and security rules in tests

[tool.ruff.mccabe]
max-complexity = 10

[tool.pyright]
pythonVersion = "3.11"
reportMissingImports = true
reportMissingTypeStubs = false
reportUnknownVariableType = false
reportUnknownMemberType = false
reportOptionalMemberAccess = false

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
addopts = "--cov=src/lancedb_mcp --cov-report=term-missing --cov-branch --strict-markers"
markers = [
    "integration: marks tests as integration tests",
    "slow: marks tests as slow running",
    "embedding: marks tests that require embedding models",
]
filterwarnings = [
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

[tool.bandit]
exclude_dirs = ["tests", "build", "dist"]
skips = ["B101", "B601"]  # Skip assert_used and shell injection for our use case

[dependency-groups]
dev = [
    "pytest-asyncio>=1.1.0",
    "pytest-cov>=6.2.1",
    "ruff>=0.12.11",
]
