name: Release

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v0.1.0)'
        required: true
        type: string

permissions:
  contents: write
  id-token: write # Required for trusted publishing

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    
    outputs:
      version: ${{ steps.extract-version.outputs.version }}
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract version from tag
        id: extract-version
        run: |
          if [[ "${{ github.event_name }}" == "release" ]]; then
            VERSION=${{ github.event.release.tag_name }}
          else
            VERSION=${{ inputs.version }}
          fi
          
          # Remove 'v' prefix if present
          VERSION=${VERSION#v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Releasing version: $VERSION"

      - name: Verify version format
        run: |
          VERSION="${{ steps.extract-version.outputs.version }}"
          if [[ ! $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+([a-zA-Z0-9\.\-]+)?$ ]]; then
            echo "❌ Invalid version format: $VERSION"
            echo "Expected format: X.Y.Z or X.Y.Z-suffix"
            exit 1
          fi
          echo "✅ Version format is valid: $VERSION"

  test-release:
    name: Test Before Release
    runs-on: ubuntu-latest
    needs: [validate-release]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v3

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Update version in pyproject.toml
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          sed -i "s/^version = .*/version = \"$VERSION\"/" pyproject.toml
          echo "Updated version to: $VERSION"

      - name: Install dependencies
        run: uv sync --frozen --all-extras

      - name: Install dev dependencies
        run: uv add --dev pytest pytest-cov pyright ruff bandit[toml]

      - name: Run full test suite
        run: |
          uv run pytest tests/ --cov=src/lancedb_mcp --cov-fail-under=70
          uv run pyright src/ tests/
          uv run ruff format --check .
          uv run ruff check .

      - name: Build package
        run: uv build

      - name: Test installation
        run: |
          uv pip install dist/*.whl
          aas-lancedb-mcp --help || echo "CLI test completed"

  build-and-publish:
    name: Build and Publish
    runs-on: ubuntu-latest
    needs: [validate-release, test-release]
    environment: release
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v3

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Update version in pyproject.toml
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          sed -i "s/^version = .*/version = \"$VERSION\"/" pyproject.toml
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add pyproject.toml
          git commit -m "Bump version to $VERSION" || echo "No changes to commit"

      - name: Install dependencies
        run: uv sync --frozen

      - name: Build package
        run: uv build

      - name: Generate SBOM
        run: |
          uv tool run --from cyclonedx-bom==6.1.3 \
            cyclonedx-py environment .venv \
            --PEP-639 --gather-license-texts \
            --pyproject pyproject.toml \
            --mc-type library \
            --output-format JSON > sbom.json

      - name: Upload SBOM as artifact
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.json

      - name: Verify distribution
        run: |
          uv tool run --from twine twine check dist/*
          ls -la dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          attestations: true
          skip-existing: false
          verbose: true

      - name: Generate build provenance attestations
        uses: actions/attest-build-provenance@v1
        with:
          subject-path: |
            dist/*.tar.gz
            dist/*.whl
            sbom.json

  create-release-notes:
    name: Update Release Notes
    runs-on: ubuntu-latest
    needs: [build-and-publish]
    if: github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate release notes
        id: generate-notes
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          
          # Get the latest tag before this one
          PREVIOUS_TAG=$(git tag --sort=-version:refname | grep -v "v$VERSION" | head -1 || echo "")
          
          # Generate changelog
          if [[ -n "$PREVIOUS_TAG" ]]; then
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" "${PREVIOUS_TAG}..HEAD" --no-merges)
          else
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" --no-merges)
          fi
          
          # Create release notes
          cat > release_notes.md << EOF
          ## What's Changed
          
          $CHANGELOG
          
          ## Installation
          
          \`\`\`bash
          # Install from PyPI
          uv tool install aas-lancedb-mcp
          
          # Or with pip
          pip install aas-lancedb-mcp
          \`\`\`
          
          ## Docker
          
          \`\`\`bash
          docker pull ghcr.io/applied-ai-systems/aas-lancedb-mcp:v$VERSION
          \`\`\`
          
          **Full Changelog**: https://github.com/${{ github.repository }}/compare/${PREVIOUS_TAG}...v$VERSION
          EOF
          
          echo "Generated release notes for version v$VERSION"

      - name: Create GitHub Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          
          gh release create "v$VERSION" \
            --title "Release v$VERSION" \
            --notes-file release_notes.md \
            --discussion-category "Announcements" \
            dist/* sbom.json

  notify-success:
    name: Notify Release Success
    runs-on: ubuntu-latest
    needs: [build-and-publish]
    if: success()
    
    steps:
      - name: Release Summary
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          echo "## 🎉 Release v$VERSION Published Successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Package Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: v$VERSION" >> $GITHUB_STEP_SUMMARY
          echo "- **PyPI**: https://pypi.org/project/aas-lancedb-mcp/$VERSION/" >> $GITHUB_STEP_SUMMARY
          echo "- **Release**: ${{ github.server_url }}/${{ github.repository }}/releases/tag/v$VERSION" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🚀 Installation" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "uv tool install aas-lancedb-mcp" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY